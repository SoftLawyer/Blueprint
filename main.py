# main.py - Yerel Kontrolc√ºye Rapor Veren Orkestra ≈ûefi

import os
import logging
import traceback
import tempfile
import shutil
from flask import Flask, request, jsonify
from google.cloud import storage

# Kendi mod√ºllerimizi import edelim
import hikayeuretir
import googleilesesolustur
# profilfotoolusturur ve profilfotonunarkasinisiler artƒ±k kullanƒ±lmƒ±yor
import videoyapar
import kucukresimolusturur

# --- TEMEL AYARLAR ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(module)s.%(funcName)s] - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# --- SABƒ∞T DEƒûƒ∞≈ûKENLER (G√úNCELLENDƒ∞) ---
KAYNAK_BUCKET_ADI = "video-fabrikasi-kaynaklar"
CIKTI_BUCKET_ADI = "video-fabrikasi-ciktilar"
PROJECT_ID = "video-fabrikasi" 

app = Flask(__name__)

@app.route("/", methods=["POST"])
def video_fabrikasi_baslat():
    """
    Bu fonksiyon, bir POST isteƒüi aldƒ±ƒüƒ±nda t√ºm video √ºretim hattƒ±nƒ± tetikler.
    Bu artƒ±k ana √ßalƒ±≈üma y√∂ntemi olmasa da, tutarlƒ±lƒ±k i√ßin g√ºncellenmi≈ütir.
    """
    temp_dir = tempfile.mkdtemp(dir="/tmp")
    logging.info(f"üöÄ Yeni √ºretim s√ºreci ba≈ülatƒ±ldƒ±. Ge√ßici klas√∂r: {temp_dir}")
    
    story_title = "" 
    
    try:
        # ==============================================================================
        # ADIM 1: KONU SE√áƒ∞Mƒ∞ (GCS'den)
        # ==============================================================================
        storage_client = storage.Client()
        kaynak_bucket = storage_client.bucket(KAYNAK_BUCKET_ADI)
        titles_blob = kaynak_bucket.blob("creator_blueprint_titles.txt")
        
        if not titles_blob.exists():
            logging.warning("ƒ∞≈ülenecek yeni konu bulunamadƒ± (creator_blueprint_titles.txt yok). √úretim bandƒ± durduruldu.")
            return jsonify({"status": "finished", "message": "No new topics to process."}), 200

        all_titles = titles_blob.download_as_text(encoding="utf-8").strip().splitlines()
        if not all_titles:
            logging.warning("ƒ∞≈ülenecek yeni konu bulunamadƒ± (dosya bo≈ü). √úretim bandƒ± durduruldu.")
            return jsonify({"status": "finished", "message": "No new topics to process."}), 200

        story_title = all_titles[0]
        remaining_titles = "\n".join(all_titles[1:])
        titles_blob.upload_from_string(remaining_titles, content_type="text/plain; charset=utf-8")
        logging.info(f"üîπ '{story_title}' ba≈ülƒ±ƒüƒ± GCS'den alƒ±ndƒ±.")

        # ==============================================================================
        # ADIM 2: Hƒ∞KAYE √úRETƒ∞Mƒ∞
        # ==============================================================================
        logging.info("[ADIM 2/7] Hikaye olu≈üturuluyor...")
        formatted_text = hikayeuretir.run_script_generation_process(PROJECT_ID, story_title)
        if not formatted_text:
            raise Exception(f"'{story_title}' i√ßin metin √ºretilemedi.")
        logging.info(f"‚úÖ Hikaye ba≈üarƒ±yla olu≈üturuldu.")
        
        hikaye_path = os.path.join(temp_dir, "hikaye.txt")
        with open(hikaye_path, "w", encoding="utf-8") as f:
            f.write(formatted_text)
        logging.info(f"üíæ Hikaye ge√ßici olarak kaydedildi.")

        # ==============================================================================
        # ADIM 3: SESLENDƒ∞RME VE ALTYAZI
        # ==============================================================================
        logging.info("[ADIM 3/7] Seslendirme ve altyazƒ± √ºretimi ba≈ülƒ±yor...")
        audio_file_path, srt_file_path = googleilesesolustur.run_audio_and_srt_process(
            story_text=formatted_text,
            output_dir=temp_dir,
            project_id=PROJECT_ID
        )
        logging.info("‚úÖ Ses ve altyazƒ± ba≈üarƒ±yla olu≈üturuldu.")
        
        # ==============================================================================
        # ADIM 4: GEREKLƒ∞ G√ñRSEL VARLIKLARI ƒ∞NDƒ∞RME
        # ==============================================================================
        logging.info("[ADIM 4/7] Gerekli g√∂rseller indiriliyor...")
        
        # Profil fotoƒürafƒ±
        leo_photo_blob = kaynak_bucket.blob("leo_final.png")
        leo_photo_path = os.path.join(temp_dir, "leo_final.png")
        leo_photo_blob.download_to_filename(leo_photo_path)
        
        # Thumbnail fotoƒürafƒ±
        thumbnail_photo_blob = kaynak_bucket.blob("kucukresimicinfoto.png")
        thumbnail_photo_path = os.path.join(temp_dir, "kucukresimicinfoto.png")
        thumbnail_photo_blob.download_to_filename(thumbnail_photo_path)
        
        logging.info("‚úÖ Gerekli g√∂rseller indirildi.")

        # ==============================================================================
        # ADIM 5: YOUTUBE K√ú√á√úK RESMƒ∞ OLU≈ûTURMA
        # ==============================================================================
        logging.info("[ADIM 5/7] YouTube k√º√ß√ºk resmi olu≈üturuluyor...")
        final_thumbnail_path = kucukresimolusturur.run_thumbnail_generation(
            story_text=formatted_text,
            profile_photo_path=thumbnail_photo_path,
            output_dir=temp_dir,
            worker_project_id=PROJECT_ID
        )
        logging.info("‚úÖ YouTube k√º√ß√ºk resmi ba≈üarƒ±yla olu≈üturuldu.")
        
        # ==============================================================================
        # ADIM 6: Vƒ∞DEO Bƒ∞RLE≈ûTƒ∞RME
        # ==============================================================================
        logging.info("[ADIM 6/7] Video birle≈ütirme i≈ülemi ba≈ülƒ±yor...")
        
        # Arka plan videosu indirme
        bg_video_path = get_random_background_video(storage_client, temp_dir)

        final_video_path = videoyapar.run_video_creation(
            bg_video_path=bg_video_path,
            audio_path=audio_file_path,
            srt_path=srt_file_path,
            profile_photo_path=leo_photo_path,
            output_dir=temp_dir
        )
        logging.info("‚úÖ Video ba≈üarƒ±yla birle≈ütirildi.")

        # ==============================================================================
        # ADIM 7: PAKETLEME VE TESLƒ∞MAT (CLOUD STORAGE'A Y√úKLEME)
        # ==============================================================================
        logging.info("[ADIM 7/7] √úretilen dosyalar Cloud Storage'a y√ºkleniyor...")
        cikti_bucket = storage_client.bucket(CIKTI_BUCKET_ADI)
        safe_folder_name = "".join(c if c.isalnum() or c in " -_" else "_" for c in story_title)

        files_to_upload = {
            "nihai_video.mp4": final_video_path,
            "kucuk_resim.png": final_thumbnail_path,
            "altyazi.srt": srt_file_path,
            "ses.wav": audio_file_path,
            "hikaye.txt": hikaye_path
        }

        for filename, local_path in files_to_upload.items():
            if os.path.exists(local_path):
                blob_path = f"{safe_folder_name}/{filename}"
                blob = cikti_bucket.blob(blob_path)
                blob.upload_from_filename(local_path)
                logging.info(f"  -> Y√ºklendi: {blob_path}")
        
        logging.info("‚úÖ T√ºm dosyalar ba≈üarƒ±yla Cloud Storage'a y√ºklendi.")

        logging.info("üéâüéâüéâ √úRETƒ∞M BANDI BA≈ûARIYLA TAMAMLANDI! üéâüéâüéâ")
        return jsonify({
            "status": "success",
            "message": f"Video for '{story_title}' was successfully generated and uploaded.",
            "processed_title": story_title
        }), 200

    except Exception as e:
        error_message = f"√úretim bandƒ±nda '{story_title}' i≈ülenirken hata olu≈ütu: {e}"
        logging.error(error_message, exc_info=True)
        return jsonify({
            "status": "error",
            "message": error_message,
            "failed_title": story_title
        }), 500

    finally:
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
            logging.info(f"üßπ Ge√ßici klas√∂r temizlendi: {temp_dir}")

def get_random_background_video(storage_client, temp_dir):
    try:
        bucket = storage_client.bucket(KAYNAK_BUCKET_ADI)
        blobs = list(bucket.list_blobs(prefix="arkaplan_videolari/"))
        video_blobs = [b for b in blobs if b.name.endswith(".mp4") and b.size > 0]
        if not video_blobs:
            raise FileNotFoundError("'arkaplan_videolari' klas√∂r√ºnde video bulunamadƒ±.")
        random_blob = random.choice(video_blobs)
        bg_video_path = os.path.join(temp_dir, os.path.basename(random_blob.name))
        random_blob.download_to_filename(bg_video_path)
        return bg_video_path
    except Exception as e:
        logging.error(f"‚ùå Arka plan videosu indirilirken hata: {e}")
        raise

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port, debug=False)

